package CommunicationDevice
public
	with DataTypes;

	thread data_processor
		features
			sensor_in: in data port DataTypes::aggregated_sensor_data;
			data_out: out data port DataTypes::aggregated_sensor_data;
			alarm_out: out event port;
		flows
			flow_path: flow path sensor_in -> data_out;
			flow_alarm: flow source alarm_out;
		properties
			Dispatch_Protocol => Periodic;
			Period => 100ms;
			Compute_Execution_Time => 10ms .. 20ms;
	end data_processor;

	process control
		features
			sensor_data: in data port DataTypes::aggregated_sensor_data;
			processed_data: out data port DataTypes::aggregated_sensor_data;
			alarm_out: out event port;
		flows
			flow_path: flow path sensor_data -> processed_data;
			flow_alarm: flow source alarm_out;
	end control;

	process implementation control.sensor_data
		subcomponents
			data_processing: thread data_processor;
		connections
			sensor_conn: port sensor_data -> data_processing.sensor_in;
			data_out_conn: port data_processing.data_out -> processed_data;
			alarm_out_conn: port data_processing.alarm_out -> alarm_out;
		flows
			flow_path: flow path sensor_data -> sensor_conn -> data_processing.flow_path -> data_out_conn -> processed_data;
			flow_alarm: flow source data_processing.flow_alarm -> alarm_out_conn -> alarm_out;
	end control.sensor_data;

	system CommunicationDevice
		features
			zigbee_in: in data port DataTypes::aggregated_sensor_data;
			bluetooth_out: out data port DataTypes::aggregated_sensor_data;
			wifi_out: out data port DataTypes::aggregated_sensor_data;
			ethernet_out: out data port DataTypes::aggregated_sensor_data;
			gprs_out: out data port DataTypes::aggregated_sensor_data;
			intercom_in: in event data port DataTypes::aggregated_sensor_data;
			intercom_out: out event data port DataTypes::aggregated_sensor_data;
			alarm_out: out event port;
			power_in: in event port;
			power_out: out event port;
		flows
			flow_bluetooth: flow path zigbee_in -> bluetooth_out;
			flow_wifi: flow path zigbee_in -> wifi_out;
			flow_ethernet: flow path zigbee_in -> ethernet_out;
			flow_gprs: flow path zigbee_in -> gprs_out;
			flow_zigbee_intercom: flow path zigbee_in -> intercom_out;
			flow_intercom_bluetooth: flow path intercom_in -> bluetooth_out;
			flow_intercom_wifi: flow path intercom_in -> wifi_out;
			flow_intercom_ethernet: flow path intercom_in -> ethernet_out;
			flow_intercom_gprs: flow path intercom_in -> gprs_out;
			flow_alarm: flow source alarm_out;
	end CommunicationDevice;

	system implementation CommunicationDevice.impl
		subcomponents
			controller: process control.sensor_data;
		connections
			zigbee_in_conn: port zigbee_in -> controller.sensor_data;
			bluetooth_out_conn: port controller.processed_data -> bluetooth_out;
			wifi_out_conn: port controller.processed_data -> wifi_out;
			ethernet_out_conn: port controller.processed_data -> ethernet_out;
			gprs_out_conn: port controller.processed_data -> gprs_out;
			alarm_out_conn: port controller.alarm_out -> alarm_out;
		flows
			flow_bluetooth: flow path zigbee_in -> zigbee_in_conn -> controller.flow_path -> bluetooth_out_conn -> bluetooth_out;
			flow_wifi: flow path zigbee_in -> zigbee_in_conn -> controller.flow_path -> wifi_out_conn -> wifi_out;
			flow_ethernet: flow path zigbee_in -> zigbee_in_conn -> controller.flow_path -> ethernet_out_conn -> ethernet_out;
			flow_gprs: flow path zigbee_in -> zigbee_in_conn -> controller.flow_path -> gprs_out_conn -> gprs_out;
			flow_alarm: flow source controller.flow_alarm -> alarm_out_conn -> alarm_out;
	end CommunicationDevice.impl;
	
end CommunicationDevice;